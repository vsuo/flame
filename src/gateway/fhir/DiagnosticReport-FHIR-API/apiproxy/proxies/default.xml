<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <Description/>
    <DefaultFaultRule name="generic_fault_handler">
        <Step>
            <Name>Fault_GenericFault</Name>
        </Step>
        <!-- <AlwaysEnforce>true</AlwaysEnforce> -->
    </DefaultFaultRule>
    <FaultRules>
		<!-- This RaiseFault policy is called when there is an unauthorized access to this API:Reason -> API is NOT added to Products. -->
        <FaultRule name="invalid_key_rule">
            <Step>
                <Name>Fault_InvalidCredentials</Name>
            </Step>
            <Condition>fault.name = "InvalidApiKey"</Condition>
        </FaultRule>
		
		<!-- This RaiseFault policy is called when there is an unauthorized access to this API:Reason -> API is called using invalid token. -->
        <FaultRule name="invalid_access_token_rule">
            <Step>
                <Name>Fault_InvalidCredentials</Name>
            </Step>
            <Condition>fault.name = "invalid_access_token"</Condition>
        </FaultRule>
        <FaultRule name="invalid_access_token_rule2">
            <Step>
                <FaultRules/>
                <Name>Fault_InvalidCredentials</Name>
            </Step>
            <Condition>(request.verb == "DELETE") and (fault.name = "invalid_access_token")</Condition>
        </FaultRule>
		
		<!-- This RaiseFault policy is called when the number of request messages that  is allowed to submit to this API over the course of an hour,day, week, or month exceeds its desired limit. -->
        <FaultRule name="quota_violation">
            <Step>
                <Name>Fault_QuotaViolation</Name>
            </Step>
            <Condition>(fault.name = "QuotaViolation") or (fault.name = "SpikeArrestViolation")</Condition>
        </FaultRule>
		
		<!-- This RaiseFault policy is called to handle SQLInjection threats. This policy checks for patterns and URL's of query params. -->
        <FaultRule name="regexThreat">
            <Step>
                <Name>Fault_RegexThreat</Name>
            </Step>
            <Condition>(fault.name = "ThreatDetected") or (threatPresent = true)</Condition>
        </FaultRule>
		
		<!-- This RaiseFault policy is called to handle invalid data in PUT and POST requests.-->
        <FaultRule name="json_threat">
            <Step>
                <Name>Fault_InvalidPayload</Name>
            </Step>
            <Condition>(fault.name = "ExceededContainerDepth") or (fault.name = "ExceededObjectEntryCount") or 
              (fault.name = "ExceededArrayElementCount") or (fault.name = "ExceededObjectEntryNameLength") or 
              (fault.name = "ExceededStringValueLength") or (fault.name = "SourceUnavailable") or 
              (fault.name = "NonMessageVariable") or (fault.name = "ExecutionFailed")</Condition>
        </FaultRule>
    </FaultRules>
    <PreFlow name="PreFlow">
        <Request>
			<!-- This OAuthV2 policy checks for the Scope of token and verifies it.-->
            <Step>
                <Name>VerifyAccessToken</Name>
            </Step>			
			<!-- This SpikeArrest policy sets the rate limit for this API.-->
            <Step>
                <Name>EnforceRateLimit</Name>
            </Step>			
			<!-- This Quota policy sets the interval, time unit and quota for this API.-->
            <Step>
                <Name>EnforceQuota</Name>
            </Step>
			<!-- This RegularExpressionProtection policy ensures that URL  doesn't contain "delete, exec, shutdown, insert, drop table update".-->
            <Step>
                <Name>CheckURIParamRegex</Name>
            </Step>			
			<!-- This RegularExpressionProtection policy ensures that payload doesn't contain "delete, exec, shutdown, insert, drop table update".-->
            <Step>
                <Name>CheckPayloadRegex</Name>
                <Condition>request.verb != "GET"</Condition>
            </Step>
				<!-- This JavaScript policy calls a javascript resource file that ensures that query parameters doesn't contain "delete, exec, shutdown, insert, drop table update"..-->
            <Step>
                <Name>CheckQueryParamRegex</Name>
            </Step>
			<!-- This RaiseFault policy is called when there are SQLInjection threats. This policy checks for patterns and URL's of query params. -->
            <Step>
                <Name>Fault_RegexThreat</Name>
                <Condition>threatPresent = true</Condition>
            </Step>
			<!-- This AssignMessage policy extracts various attributes of access token and assigns it to variables.-->
            <Step>
                <Name>ExtractTokenAttributes</Name>
            </Step>
			<!-- This LookupCache policy looks for email id of developer in cache.-->
            <Step>
                <FaultRules/>
                <Name>GetDeveloperFromCache</Name>
            </Step>
			<!-- This ExtractVariable policy extracts the developer info from developer cache.-->
            <Step>
                <FaultRules/>
                <Name>ExtractDeveloperInfoFromDeveloperCache</Name>
                <Condition>lookupcache.GetDeveloperFromCache.cachehit is true</Condition>
            </Step>
			<!-- This AccessEntity policy sets the email Id of the developer for this API.This will be called if developer info is not found from cache.-->
            <Step>
                <FaultRules/>
                <Name>GetDeveloperInfo</Name>
                <Condition>lookupcache.GetDeveloperFromCache.cachehit is false</Condition>
            </Step>
			<!-- This PopulateCache policy adds the developer info to cache.This will be called if developer info is not found from cache.-->
            <Step>
                <FaultRules/>
                <Name>AddDeveloperToCache</Name>
                <Condition>lookupcache.GetDeveloperFromCache.cachehit is false</Condition>
            </Step>
			<!-- This ExtractVariable policy extracts the developer info.-->
            <Step>
                <FaultRules/>
                <Name>ExtractDeveloperInfoFromDeveloper</Name>
                <Condition>lookupcache.GetDeveloperFromCache.cachehit is false</Condition>
            </Step>
			<!-- This JavaScript policy calls a javascript resource file that checks if user is allowed to access Patient data.-->
            <Step>
                <Name>CheckPatientAuthorizations</Name>
            </Step>
			<!-- This RaiseFault policy  checks if user is allowed to access Patient data.-->
            <Step>
                <Name>Fault_AppNotAuthorizedForPatientData</Name>
                <Condition>(isInternalApplication != true) and (isAuthorizedByPatient != true)</Condition>
            </Step>
			<!--This AssignMessage policy initialize required variable in flow. -->
            <Step>
                <Name>InitialConfiguration</Name>
            </Step>
			<!-- This AssignMessage policy sets the 'returnType' to '_format' value that is passed in query param .-->
            <Step>
                <Name>GetResponseFormatFromQueryParam</Name>
                <Condition>((request.queryparam._format != "") and (request.queryparam._format != null))</Condition>
            </Step>
			<!-- This AssignMessage policy removes  '_format' query param from request URL.-->
            <Step>
                <Name>RemoveFormatQueryParam</Name>
            </Step>
			<!-- This AssignMessage policy set ACcept header to "application/json" if not set and '_format' is also null.-->
            <Step>
                <Name>SetAcceptHeader</Name>
                <Condition>((request.header.Accept = null) or (request.header.Accept = "") or (request.header.Accept = "*/*"))</Condition>
            </Step>
		</Request>
        <Response>
			<!-- This ServiceCallout policy calls the Connector API of respective server for POST_Search requests.-->
            <Step>
                <Name>Servicecallout.InvokePOSTSearch</Name>
                <Condition>(request.verb = "POST" ) and (proxy.pathsuffix MatchesPath "/_search")</Condition>
            </Step>
			<!-- This ServiceCallout policy calls the Connector API of respective server for GET requests.-->
            <Step>
                <Name>Servicecallout.InvokeGET</Name>
                <Condition>request.verb="GET"</Condition>
            </Step>
			<!-- This AssignPolicy will execute when unsupported methods are called on resource. -->
            <Step>
                <Name>Fault_UnsupportedOperation</Name>
                <Condition>invokeConnectorAPIResponse == null</Condition>
            </Step>
			<!-- This policy adds CORS headers to response.-->
            <Step>
                <Name>CORSSupport</Name>
            </Step>
			<!-- This JavaScriptCallout policy replaces the server specific URLS with proxy URL.-->
            <Step>
                <Name>ReplaceInternalProxyLinkURLs</Name>
                <Condition>invokeConnectorAPIResponse != null</Condition>
            </Step>
        </Response>
    </PreFlow>
     <Flows>
		<!-- This flow verifies CORS supports-->
		<Flow name="OptionsPreFlight">
            <Request/>
            <Response>
                <Step>
                    <Name>CORSSupport</Name>
                </Step>
            </Response>
            <Condition>request.verb == "OPTIONS"</Condition>
        </Flow>
	</Flows>
    <PostFlow name="PostFlow">
        <Request/>
        <Response/>
    </PostFlow>
    <HTTPProxyConnection>
        <BasePath>/v2/DiagnosticReport</BasePath>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
	<RouteRule name="NoRoute">
        <Condition>request.verb == "OPTIONS"</Condition>
    </RouteRule>
    <RouteRule name="default"/>
</ProxyEndpoint>