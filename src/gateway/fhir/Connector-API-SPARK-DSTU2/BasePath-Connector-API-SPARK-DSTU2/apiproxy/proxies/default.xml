<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <Description/>
    <DefaultFaultRule name="generic_fault_handler">
        <Step>
            <Name>Fault_GenericFault</Name>
        </Step>
        <!-- <AlwaysEnforce>true</AlwaysEnforce> -->
    </DefaultFaultRule>
    <FaultRules>
        <FaultRule name="access_forbidden">
            <Step>
                <Name>Fault_AccessControl</Name>
            </Step>
            <Condition>fault.name = "IPDeniedAccess"</Condition>
        </FaultRule>
    </FaultRules>
    <PreFlow name="PreFlow">
        <Request>
            <!-- This policy allow access to only listed hosts. -->
            <Step>
                <Name>AccessControl</Name>
            </Step>
			<!--This AssignMessage policy initialize required variable in flow. -->
            <Step>
                <Name>InitialConfiguration</Name>
            </Step>
			<!-- This ExtractVariable policy extracts the following variables: primaryResource, primaryresourceId, versionID, subResource, subResourceId.-->
            <Step>
                <Name>ExtractPrimaryResourceTypeAndId</Name>
            </Step>
			<!-- This AssignMessage policy sets  returnType to 'request.header.Accept' value.-->
            <Step>
                <Name>SetReturnType</Name>
            </Step>
        </Request>
        <Response/>
    </PreFlow>
	<Flows>
		<Flow name="fetch_pagination_data">
            <Description/>
            <Request>
				<!-- This AssignMessage policy sets  accept header to 'application/xml'.-->
                <Step>
                    <Name>SetAcceptHeaderToXML</Name>
                </Step>
				<!-- This AssignMessage policy sets required query parameters and remove extra  query parameters in request.-->
              <Step>
                    <Name>AssignPaginationAttributes</Name>
                </Step>
            </Request>
            <Response>
			<!-- This AssignMessage policy sets  'Content-Type' header to 'application/atom+xml;charset=UTF-8' if server does not set it.-->
                <Step>
                    <Name>SetContentTypeBundleXML</Name>
                    <Condition>response.header.Content-Type=null</Condition>
                </Step>
            </Response>
           <Condition>((request.verb = "GET") and (request.queryparam.stateid != null and request.queryparam.stateid != "" ))		</Condition>
       </Flow>
        <Flow name="conformance">
            <Description/>
            <Request>
			<!-- This AssignMessage policy sets  accept header to 'application/xml'.-->
                <Step>
                    <Name>SetAcceptHeaderToXML</Name>
                </Step>
            </Request>
            <Response>
			<!-- This AssignMessage policy sets  'Content-Type' header to 'application/atom+xml;charset=UTF-8' if server does not set it.-->	
                <Step>
                    <Name>SetContentTypeResourceXML</Name>
                    <Condition>response.header.Content-Type=null</Condition>
                </Step>
            </Response>
            <Condition>((proxy.pathsuffix MatchesPath &quot;/metadata&quot;) and (request.verb = &quot;GET&quot;)) or ((proxy.pathsuffix MatchesPath &quot;/&quot;) and (request.verb = &quot;OPTIONS&quot;))</Condition>
        </Flow>
        <Flow name="conceptMap_read">
            <Description/>
            <Request>
			<!-- This AssignMessage policy sets  accept header to 'application/xml'.-->
                <Step>
                    <Name>SetAcceptHeaderToXML</Name>
                </Step>
            </Request>
            <Response>
			<!-- This AssignMessage policy sets  'Content-Type' header to 'application/atom+xml;charset=UTF-8' if server does not set it.-->	
                <Step>
                    <Name>SetContentTypeBundleXML</Name>
                    <Condition>response.header.Content-Type=null</Condition>
                </Step>
            </Response>
            <Condition>((proxy.pathsuffix MatchesPath &quot;/ConceptMap/*&quot;) or (proxy.pathsuffix MatchesPath &quot;/ConceptMap&quot;)) and (request.verb = &quot;GET&quot;)</Condition>
        </Flow>
        <Flow name="default">
            <!-- Need logic to determine if it's an invalid resource, bad parameter, etc. -->
            <Description/>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>Fault_UnknownResource</Name>
                </Step>
            </Request>
            <Response/>
        </Flow>
    </Flows>
    <PostFlow name="PostFlow">
        <Request/>
        <Response>
            <!-- This AssignMessage policy sets variables required for JavaCallout.-->
            <Step>
                <Name>SetFHIRConversionOptions</Name>
                <Condition>response.header.Content-Type != returnType</Condition>
            </Step>
            <!-- This JavaCallout policy performs JSON-XML conversion. Execute when server response format does not match with user required format .-->
            <Step>
                <Name>FHIRConversion</Name>
                <Condition>(returnType  ~~ ".*json.*")</Condition>
            </Step>
            <!-- This AssignMessage policy sets response variables and content-->
            <Step>
                <Name>SetResponseToConvertedDoc</Name>
                <Condition>response.header.Content-Type != returnType</Condition>
            </Step>
			<!-- This JavaScriptCallout policy replaces the server specific URLS with proxy URL.-->
            <Step>
                <Name>ReplaceTargetLinkURLs</Name>
            </Step>
            <!-- This AssignMessage policy sets final 'proxyResponse' to paylaod.-->
            <Step>
                <Name>AssignProxyResponse</Name>
            </Step>
            <!-- This JavaScriptCallout policy sets Content-Length header.-->
            <Step>
                <Name>SetContentLength</Name>
                <Condition>(response.header.Transfer-Encoding = null) and (returnType != null)</Condition>
            </Step>
        </Response>
    </PostFlow>
    <HTTPProxyConnection>
        <BasePath>/spark-dstu2</BasePath>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="default">
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
</ProxyEndpoint>